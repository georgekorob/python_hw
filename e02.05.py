"""
5. Создать список, содержащий цены на товары (10–20 товаров), например:
[57.8, 46.51, 97, ...]
* Вывести на экран эти цены через запятую в одну строку,
цена должна отображаться в виде <r> руб <kk> коп (например «5 руб 04 коп»).
Подумать, как из цены получить рубли и копейки, как добавить нули, если, например,
получилось 7 копеек или 0 копеек (должно быть 07 коп или 00 коп).

* Вывести цены, отсортированные по возрастанию, новый список не создавать (доказать,
что объект списка после сортировки остался тот же).
* Создать новый список, содержащий те же цены, но отсортированные по убыванию.
* Вывести цены пяти самых дорогих товаров. Сможете ли вывести цены этих товаров по возрастанию,
написав минимум кода?

Задачи со * предназначены для продвинутых учеников, которым мало сделать обычное задание.
"""
from random import randint as rd

# Получаем список 10 цен
costs = [rd(1, 1000) / 100 for i in range(0, 10)]
# Разделяем рубли и копейки
rkk = [[int(c // 1), int(c % 1 * 100)] for c in costs]
# Вывод на экран через запятую
print('Вывод цен:\t' + ', '.join([f'{r:02d} руб {kk:02d} коп' for r, kk in rkk]) + '\n')

# Цены, отсортированные по возрастанию
print('Проверка сохранности объекта после сортировки:')
sum_before = round(sum(costs), 2)
id_before = id(costs)
# Сортировка массива
costs.sort()
sum_after = round(sum(costs), 2)
id_after = id(costs)
# Проверка показывает что объекты те же
print(f'Суммы {sum_before} и {sum_after} ' + 'равны!' if sum_before == sum_after else 'не равны!')
print(f'Адреса {id_before} и {id_after} ' + ('равны!' if id_before == id_after else 'не равны!') + '\n')

# Цены по убыванию
new_costs = costs[::-1]
print(f'Цены по убыванию:\t{new_costs}')

# Вывод цены пяти самых дорогих товаров по возрастанию
print(f'5 цен по возрастанию:\t{new_costs[-6::-1]}')
