"""6. Реализовать простую систему хранения данных о суммах продаж булочной.
Должно быть два скрипта с интерфейсом командной строки: для записи данных и для вывода на экран записанных данных. 
При записи передавать из командной строки значение суммы продаж. 
Для чтения данных реализовать в командной строке следующую логику:
просто запуск скрипта — выводить все записи;
запуск скрипта с одним параметром-числом — выводить все записи с номера, равного этому числу, до конца;
запуск скрипта с двумя числами — выводить записи, начиная с номера, равного первому числу, по номер, 
равный второму числу, включительно.
7. Подумать, как избежать чтения всего файла при реализации второго и третьего случаев.
Данные хранить в файле bakery.csv в кодировке utf-8. Нумерация записей начинается с 1. Примеры запуска скриптов:

python add_sale.py 5978,5
python add_sale.py 8914,3
python add_sale.py 7879,1
python add_sale.py 1573,7
python show_sales.py
5978,5
8914,3
7879,1
1573,7
python show_sales.py 3
7879,1
1573,7
python show_sales.py 1 3
5978,5
8914,3
7879,1"""

import sys

# Так как в 7 задании раскрываются дополнительные параметры 6 задачи, то было принято решение
# писать код сразу для обоих задач
with open('bakery.csv', 'r', encoding='utf-8') as f:
    if len(sys.argv) < 2:
        line = f.readline().strip()
        while line:
            print(line)
            line = f.readline().strip()
    elif len(sys.argv) < 3:
        num = int(sys.argv[1]) - 1
        # [f.readline() for _ in range(num)]
        # Так как строки имеют равную длину, можно использовать переход, чтобы обойти чтение всего файла
        f.seek(8 * num)
        line = f.readline().strip()
        while line:
            print(line)
            line = f.readline().strip()
    else:
        num0, num1 = map(int, sys.argv[1:3])
        # [f.readline() for _ in range(num0-1)]
        f.seek(8 * (num0 - 1))
        for _ in range(num1 - num0 + 1):
            line = f.readline().strip()
            print(line)
