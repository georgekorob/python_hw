"""
4. * (вместо задачи 3) Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате
«Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари,
реализованные по схеме предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы.
Например:
//>>> >>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
{
    "А": {
        "П": "Петр Алексеев"
    },
    "С": {
        "И": ["Иван Сергеев", "Инна Серова"],
        "А": ["Анна Савельева"]
    }
}
Сможете ли вы вернуть отсортированный по ключам словарь?
"""


def thesaurus_adv(*args):
    """
    Функция перевода списка полных имен в словарь двойной вложенности
    :param args: Список имен и фамилий
    :return: Словарь полных имен
    """
    res_dict_f = {}
    for arg in args:
        # Разделим имена и фамилии
        names = arg.split(' ')
        # Сделаем все с большой буквы
        name, surname = names[0].capitalize(), names[1].capitalize()
        # Если ключ по фамилии есть
        if res_dict_f.get(surname[0]):
            # Если ключ по имени есть
            if (res_dict_f[surname[0]]).get(name[0]):
                # Добавить в список
                res_dict_f[surname[0]][name[0]] += [arg]
            else:
                # Создать список
                res_dict_f[surname[0]][name[0]] = [arg]
        # Создать словарь со списком
        else:
            res_dict_f[surname[0]] = {name[0]: [arg]}
    res_dict_sort = {}
    # Сортировка словаря фамилий
    for key_f in sorted(res_dict_f):
        res_dict_sort_name = {}
        # Сортировка словаря имен
        for key_m in sorted(res_dict_f[key_f]):
            res_dict_sort_name[key_m] = sorted(res_dict_f[key_f][key_m])
        res_dict_sort[key_f] = res_dict_sort_name
    return res_dict_sort


print(thesaurus_adv("Инна Серова", "Иван Сергеев", "Петр Алексеев", "Илья Иванов", "Анна Савельева"))
